<!--
Copyright (c) 2008, Lawrence Livermore National Security, LLC. Produced at the
Lawrence Livermore National Laboratory. Written by Keith Stevens,
kstevens@cs.ucla.edu OCEC-10-073 All rights reserved. This file is part of the
C-Cat library.

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License (as published by the Free Software
Foundation) version 2, dated June 1991. This program is distributed in the hope
that it will be useful, but WITHOUT ANY WARRANTY; without even the IMPLIED
WARRANTY OF MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the terms
and conditions of the GNU General Public License for more details.  You should
have received a copy of the GNU General Public License along with this program;
if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite
330, Boston, MA 02111-1307 USA For full text see license.txt
-->

<project name="extendOntology" default="compile" basedir=".">

  <description></description>

  <!--  =================================================================== -->
  <!--  variable declaration              -->
  <!--  =================================================================== -->
  <property name="debug" value="on" />
  <property name="deprecation" value="off" />
  <property name="optimize" value="off" />
  <property name="source_java_version" value="1.5" />
  <property name="target_java_version" value="1.5" />

  <!--  Directory Declarations -->
  <property environment="env" />
  <property name="buildDir" value="build" />
  <property name="srcDir" value="src" />
  <property name="jarVersions" value="jars" />
  <property name="dataDir" value="data" />
  <property name="srcDir" value="src" />
  <property name="configDir" value="config" />
  <property name="resourceDir" value="resources" />
  <property name="alldir" value="uber" />

  <!--  Run time value Declarations -->
  <property name="source" value="NYT" />
  <property name="memSize" value="10g" />
  <property name="hadoop" location="${env.HADOOP_HOME}/bin/hadoop" />
  <property name="ontoPackage" value="gov.llnl.ontology" />

  <!--  Jar Name Declarations -->
  <property name="name" value="extendOntology" />
  <property name="version" value="1.0.0" />
  <property name="jarname" value="${jarVersions}/${name}-${version}.jar" />
  <property name="depjar" value="${jarVersions}/${name}-dep-${version}.jar" />
  <property name="alljar" value="${jarVersions}/${name}-all-${version}.jar" />

  <!--  =================================================================== -->
  <!--  path setup
  This defines the classpath for compiling the java code.
  It includes the build directory, the current directory, and every jar in the
  lib directory (or any subdirectory)                
  -->
  <!--  =================================================================== -->
  <path id="classpath">
    <pathelement path="${buildDir}" />
    <pathelement path="." />
    <fileset dir="lib">
      <include name="**/*.jar" />
    </fileset>
    <pathelement path="${env.HBASE_HOME}/conf/" />
    <pathelement path="${env.HADOOP_HOME}/conf/" />
  </path>


  <!--  =================================================================== -->
  <!--  build prep
  The only thing going on here (right now) is to generate a time stamp
  and making the build directory 
  -->
  <!--  =================================================================== -->
  <target name="prepare">
    <tstamp />
    <mkdir dir="${buildDir}" />
  </target>


  <!--  =================================================================== -->
  <!--  build targets
  Builds all of the code in the source directory
                  -->
  <!--  =================================================================== -->
  <target name="compile" depends="prepare">
    <!-- Compile the java code -->
    <javac destdir="${buildDir}" debug="${debug}" deprecation="${deprecation}" optimize="${optimize}" source="${source_java_version}" target="${target_java_version}" fork="true" memoryMaximumSize="1200M">
      <classpath refid="classpath" />
      <src path="${srcDir}" />
    </javac>
  </target>

  <!--  build targets
  Builds all of the code in the Testing directory
  -->
  <!--  =================================================================== -->
  <target name="Test" depends="compile">
    <java fork="yes" classname="Test">
      <classpath refid="classpath"/>
    </java>
  </target>

  <!--  =================================================================== -->
  <!--  build jars
  -->
  <!--  =================================================================== -->
  <target name="jars" depends="clean, compile">
    <mkdir dir="${jarVersions}" />
    <copy todir="${buildDir}">
      <fileset dir="${srcDir}" />
      <fileset dir="${resourceDir}" />
    </copy>
    <jar destfile="${jarname}" basedir="${buildDir}" />
    <copy todir="${buildDir}/lib">
      <fileset dir="lib" />
    </copy>
    <jar destfile="${depjar}" basedir="${buildDir}" />
  </target>

  <target name="cleanjar">
    <antcall target="jars" />
    <antcall target="clean" />
  </target>

  <target name="uberjar" depends="jars">
    <delete dir="${alldir}" />
    <mkdir dir="${alldir}" />
    <copy todir="${alldir}">
      <fileset dir="${buildDir}" />
    </copy>

    <unjar dest="${alldir}">
      <fileset dir="lib/" />
    </unjar>

    <jar destfile="${alljar}" basedir="${alldir}" />
    <antcall target="clean" />
  </target>

  <!--  ================================================================== -->
  <!--  housekeeping targets
  -->
  <!--  ================================================================== -->
  <target name="clean">
    <delete>
      <fileset dir="./" includes="**/*~" defaultexcludes="no" />
      <fileset dir="./" includes="**/*.log" />
    </delete>
    <delete dir="${buildDir}" />
  </target>

  <target name="cleanAll" depends="clean">
    <delete>
      <fileset dir="${jarVersions}" includes="**/*.jar" defaultexcludes="no" />
    </delete>
  </target>


  <!--  =================================================================== -->
  <!--  Hadoop run targets
        Many of these targets require an argument for the ant variable "source".
  -->
  <!--  =================================================================== -->
  <target name="createWordNetEvidenceSchema" depends="compile">
    <echo>HBASE_HOME: ${env.HBASE_HOME}</echo>
    <java fork="yes" classname="${ontoPackage}.table.WordNetEvidenceSchema" failonerror="true">
      <classpath refid="classpath" />
    </java>
  </target>

  <target name="extractEvidence" depends="jars" description="Extract noun pairs, dependency paths, and class labels from all corpora.">
    <exec executable="${hadoop}" spawn="false">
      <arg value="jar" />
      <arg value="${depjar}" />
      <arg value="${ontoPackage}.mapreduce.ExtractWordNetTrainingEvidence" />
    </exec>
    <sleep seconds="10" />
    <exec executable="${hadoop}">
      <arg value="job" />
      <arg value="-list" />
    </exec>
  </target>

  <!-- This should be moved to Trinidad in the future  -->
  <target name="importukWaCky" depends="jars" description="Import the WaCky corpus
    into the document big table">
    <exec executable="${hadoop}" spawn="false">
      <arg value="jar" />
      <arg value="${depjar}" />
      <arg value="${ontoPackage}.corpora.ImportWaCky"/>
      <arg value="/data/ukWaCky"/>
      <arg value="ukWaCky"/>
    </exec>
    <sleep seconds="10" />
    <exec executable="${hadoop}">
      <arg value="job" />
      <arg value="-list" />
    </exec>
  </target>

  <!-- This should be moved to Trinidad in the future  -->
  <target name="importWaCkypedia" depends="jars" description="Import the
    WaCkypedia corpus into the document big table">
    <exec executable="${hadoop}" spawn="false">
      <arg value="jar" />
      <arg value="${depjar}" />
      <arg value="${ontoPackage}.corpora.ImportWaCky"/>
      <arg value="/data/WaCkypedia"/>
      <arg value="WaCkypedia"/>
    </exec>
    <sleep seconds="10" />
    <exec executable="${hadoop}">
      <arg value="job" />
      <arg value="-list" />
    </exec>
  </target>

  <target name="countPaths" depends="jars" description="Count the number of
    times each dependency path occurs.">
    <exec executable="${hadoop}" spawn="false">
      <arg value="jar" />
      <arg value="${depjar}" />
      <arg value="${ontoPackage}.mapreduce.DependencyCount" />
      <arg value="${source}" />
    </exec>
    <sleep seconds="10" />
    <exec executable="${hadoop}">
      <arg value="job" />
      <arg value="-list" />
    </exec>
  </target>

  <target name="countTerms" depends="jars" description="Count the number of
    times each term occurs in a dependency path.">
    <exec executable="${hadoop}" spawn="false">
      <arg value="jar" />
      <arg value="${depjar}" />
      <arg value="${ontoPackage}.mapreduce.TermFrequencyCounts" />
      <arg value="${source}" />
    </exec>
    <sleep seconds="10" />
    <exec executable="${hadoop}">
      <arg value="job" />
      <arg value="-list" />
    </exec>
  </target>


  <target name="labelDistSim" depends="jars" description="Labels noun pairs with
    their distirbutional similarity">
    <exec executable="${hadoop}" spawn="false">
      <arg value="jar" />
      <arg value="${depjar}" />
      <arg value="${ontoPackage}.mapreduce.EvidenceSimilarityLabeler" />
      <arg value="${sspace.name}"/>
      <arg value="${sspace.file}"/>
    </exec>
    <sleep seconds="10" />
    <exec executable="${hadoop}">
      <arg value="job" />
      <arg value="-list" />
    </exec>
  </target>

  <target name="buildHypernymTrainInstances" depends="jars"
    description="Builds the hypernym training instances from the HBase Table">
    <exec executable="${hadoop}" spawn="false">
      <arg value="jar" />
      <arg value="${depjar}"/>
      <arg value="${ontoPackage}.mapreduce.BuildTrainingInstances" />
      <arg value="${source}"/>
      <arg value="hypernym"/>
      <arg value="${attributeMap}"/>
    </exec>
    <sleep seconds="10" />
    <exec executable="${hadoop}">
      <arg value="job" />
      <arg value="-list" />
    </exec>
  </target>

  <target name="buildCousinTrainInstances" depends="jars"
    description="Builds the cousin training instances from the HBase Table">
    <exec executable="${hadoop}" spawn="false">
      <arg value="jar" />
      <arg value="${depjar}"/>
      <arg value="${ontoPackage}.mapreduce.BuildTrainingInstances" />
      <arg value="${source}"/>
      <arg value="cousin"/>
      <arg value="${attributeMap}"/>
    </exec>
    <sleep seconds="10" />
    <exec executable="${hadoop}">
      <arg value="job" />
      <arg value="-list" />
    </exec>
  </target>

  <target name="buildSSpace" depends="jars" description="Build a
    DependencyVector space">
    <exec executable="${hadoop}" spawn="false">
      <arg value="jar" />
      <arg value="${depjar}"/>
      <arg value="${ontoPackage}.mapreduce.DependencyVectorSpace" />
      <arg value="${wordList}"/>
      <arg value="${sspace.file}"/>
      <arg value="${source}"/>
    </exec>
    <sleep seconds="10" />
    <exec executable="${hadoop}">
      <arg value="job" />
      <arg value="-list" />
    </exec>
  </target>

  <target name="addNovelRelations" depends="jars" description="Finds optimal
    locations for novel noun pairs">
    <exec executable="${hadoop}" spawn="false">
      <arg value="jar" />
      <arg value="${depjar}"/>
      <arg value="${ontoPackage}.mapreduce.FindValidRelations" />
      <arg value="${source}"/>
      <arg value="/data/attributeMap.bin"/>
      <arg value="/data/hypernymClassifier.bin"/>
    </exec>
    <sleep seconds="10" />
    <exec executable="${hadoop}">
      <arg value="job" />
      <arg value="-list" />
    </exec>
  </target>

  <!--  =================================================================== -->
  <!--  Standard targets
  -->
  <!--  =================================================================== -->
  <target name="buildAttributeMap" depends="compile" 
    description="Builds a simple evidence map">
    <java fork="yes"
      classname="${ontoPackage}.evidence.AttributeMap">
      <jvmarg value="-Xmx${memSize}"/>
      <classpath refid="classpath"/>
      <arg value="-d"/>
      <arg value="${depCounts}"/>
      <arg value="hypernymAttributeMap.bin"/>
      <arg value="-l"/>
      <arg value="hypernym"/>
    </java>
  </target>

  <target name="buildInstances" depends="compile" description="Builds a simple
    set of evidence training instances">
    <java fork="yes"
      classname="${ontoPackage}.evidence.BuildHypernymInstances">
      <jvmarg value="-Xmx${memSize}"/>
      <classpath refid="classpath"/>
      <arg value="${source}"/>
      <arg value="${attributeMap}"/>
      <arg value="hypernymTraining.arff"/>
    </java>
  </target>

  <target name="condenseWordNet" depends="compile" description="Condenses word
    net by using a word space and a clustering algorithm">
    <java fork="yes"
      classname="${ontoPackage}.wordnet.WordNetCondenser">
      <jvmarg value="-Xmx${memSize}"/>
      <classpath refid="classpath"/>
      <arg value="ri.sspace"/>
      <arg value="resources/dict"/>
      <arg value="condensedWordNet"/>
    </java>
  </target>

  <target name="clusterLSH" depends="compile" description="Run Locality
    Sensitive Clustering on an sspace file">
    <java fork="yes"
      classname="${ontoPackage}.clustering.LocalitySensitiveWordSpaceClustering">
      <jvmarg value="-Xmx${memSize}"/>
      <classpath refid="classpath"/>
      <arg value="${sspace.file}"/>
      <arg value="${cluster.out}"/>
    </java>
  </target>

  <target name="clusterWordSpace" depends="compile" description="Run a
    clustering algorithm over a word space to create a ClusterSimilarity">
    <java fork="yes"
      classname="${ontoPackage}.clustering.WordSpaceClusterSimilarity">
      <jvmarg value="-Xmx${memSize}"/>
      <classpath refid="classpath"/>
      <arg value="${sspace.file}"/>
      <arg value="${cluster.path}"/>
      <arg value="${cluster.out}"/>
    </java>
  </target>

  <target name="pageRankWSD" depends="compile" description="Performs
    personalised page rank WSD on a single sentence">
    <java fork="yes"
      classname="${ontoPackage}.pagerank.PersonalizedPageRankWSD">
      <jvmarg value="-Xmx${memSize}"/>
      <classpath refid="classpath"/>
      <arg value="resources/dict"/>
      <arg value="${sentence}"/>
    </java>
  </target>

</project>
